require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"tabBarModule":[function(require,module,exports){

/*
	tabBarModule
	â€“
	Created by Petter Nilsson
	http://petter.pro
 */
var defaults, getItemFromName, setBadgeValue, setSelected, updateViews;

defaults = {
  screenWidth: Screen.width,
  screenHeight: Screen.height,
  barHeight: 98,
  labelOffset: -28,
  iconOffset: -12,
  tintColor: "#007aff",
  tintColorUnselected: "#929292",
  blur: 40,
  opacity: 0.75,
  borderShadow: "0px -1px 0px 0px rgba(0,0,0,0.32)",
  backgroundColor: "#f8f8f8",
  showLabels: true,
  badgeSize: 36,
  badgeColor: "#FF3B30"
};

defaults.labelTextStyle = {
  fontSize: "20px",
  textAlign: "center",
  fontFamily: "Helvetica Neue', sans-serif"
};

defaults.badgeTextStyle = {
  fontSize: "26px",
  lineHeight: "36px",
  color: "#fff",
  textAlign: "center",
  fontFamily: "Helvetica Neue', sans-serif"
};

exports.defaults = defaults;

getItemFromName = function(name) {
  var item, j, len, ref;
  ref = this.items;
  for (j = 0, len = ref.length; j < len; j++) {
    item = ref[j];
    if (item.name === name) {
      return item;
    }
  }
};

updateViews = function(selectedItem) {
  var item, j, len, ref, results;
  ref = this.items;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    item = ref[j];
    if (item.view != null) {
      if (item.view === selectedItem.view) {
        item.view.visible = true;
      } else {
        item.view.visible = false;
      }
      if (item.blurView === selectedItem.blurView) {
        results.push(item.blurView.visible = true);
      } else {
        results.push(item.blurView.visible = false);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
};

setSelected = function(name) {
  var item, j, len, ref, results;
  if (name !== this.selected) {
    ref = this.items;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      if (item.name === name) {
        item.iconLayer.backgroundColor = defaults.tintColor;
        if (item.labelLayer) {
          item.labelLayer.style = {
            "color": defaults.tintColor
          };
        }
        if (item.iconLayer.selectedIcon) {
          item.iconLayer.style = {
            "-webkit-mask-image": "url(" + item.iconLayer.selectedIcon + ")"
          };
        }
        this.selected = item.name;
        this.updateViews(item);
        results.push(this.emit("tabBarDidSwitch", item.name));
      } else {
        item.iconLayer.backgroundColor = defaults.tintColorUnselected;
        if (item.labelLayer) {
          item.labelLayer.style = {
            "color": defaults.tintColorUnselected
          };
        }
        if (item.iconLayer.selectedIcon) {
          results.push(item.iconLayer.style = {
            "-webkit-mask-image": "url(" + item.iconLayer.icon + ")"
          });
        } else {
          results.push(void 0);
        }
      }
    }
    return results;
  }
};

setBadgeValue = function(name, value) {
  var item, j, len, ref, results;
  ref = this.items;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    item = ref[j];
    if (item.name === name) {
      if (value) {
        item.badgeLayer.html = value;
        results.push(item.badgeLayer.visible = true);
      } else {
        results.push(item.badgeLayer.visible = false);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
};

exports.tabBar = function(barItems) {
  var background, badgeLayer, blurView, i, iconLayer, itemCount, itemLayer, labelLayer, name, params, tabBar;
  tabBar = new Layer({
    x: 0,
    y: defaults.screenHeight - defaults.barHeight,
    width: defaults.screenWidth,
    height: defaults.barHeight,
    backgroundColor: defaults.backgroundColor
  });
  tabBar.style = {
    "box-shadow": defaults.borderShadow
  };
  tabBar.getItemFromName = getItemFromName;
  tabBar.updateViews = updateViews;
  tabBar.setSelected = setSelected;
  tabBar.setBadgeValue = setBadgeValue;
  tabBar.selected = null;
  tabBar.items = [];
  background = new Layer({
    x: 0,
    y: 0,
    width: defaults.screenWidth,
    height: defaults.barHeight,
    backgroundColor: defaults.backgroundColor,
    opacity: defaults.opacity,
    superLayer: tabBar
  });
  itemCount = Object.keys(barItems).length;
  i = 0;
  for (name in barItems) {
    params = barItems[name];
    itemLayer = new Layer({
      backgroundColor: "none",
      width: defaults.screenWidth / itemCount,
      height: defaults.barHeight,
      x: i * (defaults.screenWidth / itemCount),
      y: 0,
      superLayer: tabBar,
      name: name
    });
    if (params.view != null) {
      blurView = params.view.copy();
      if (ScrollComponent.prototype.isPrototypeOf(blurView)) {
        blurView.content.blur = defaults.blur;
      } else {
        blurView.blur = defaults.blur;
      }
      blurView.superLayer = tabBar;
      blurView.index = 0;
      blurView.y = blurView.y - (defaults.screenHeight - defaults.barHeight);
      itemLayer.view = params.view;
      itemLayer.blurView = blurView;
    }
    iconLayer = new Layer({
      width: 60,
      height: 60,
      superLayer: itemLayer
    });
    iconLayer.icon = params.icon;
    if (params.selectedIcon != null) {
      iconLayer.selectedIcon = params.selectedIcon;
    }
    iconLayer.style = {
      "-webkit-mask-image": "url(" + iconLayer.icon + ")",
      "-webkit-mask-repeat": "no-repeat",
      "-webkit-mask-position": "center center"
    };
    iconLayer.centerX();
    iconLayer.centerY(defaults.iconOffset);
    itemLayer.iconLayer = iconLayer;
    if (defaults.showLabels) {
      labelLayer = new Layer({
        width: itemLayer.width,
        x: 0,
        y: defaults.barHeight + defaults.labelOffset,
        superLayer: itemLayer,
        backgroundColor: "none"
      });
      labelLayer.html = name;
      labelLayer.style = defaults.labelTextStyle;
      itemLayer.labelLayer = labelLayer;
    }
    badgeLayer = new Layer({
      width: defaults.badgeSize,
      height: defaults.badgeSize,
      x: 0,
      y: 6,
      borderRadius: 18,
      superLayer: itemLayer,
      backgroundColor: defaults.badgeColor
    });
    badgeLayer.style = defaults.badgeTextStyle;
    badgeLayer.centerX(26);
    itemLayer.badgeLayer = badgeLayer;
    itemLayer.badgeLayer.visible = false;
    tabBar.items.push(itemLayer);
    itemLayer.on(Events.Click, function() {
      return tabBar.setSelected(this.name);
    });
    i++;
  }
  tabBar.setSelected(tabBar.items[0].name);
  return tabBar;
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvUGV0dGVyL0Rlc2t0b3AvdGFiQmFyTW9kdWxlL2FwcHN0b3JlLWV4YW1wbGUuZnJhbWVyL21vZHVsZXMvdGFiQmFyTW9kdWxlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQUE7Ozs7O0dBQUE7QUFBQSxJQUFBLGtFQUFBOztBQUFBLFFBUUEsR0FBVztBQUFBLEVBQ1YsV0FBQSxFQUFhLE1BQU0sQ0FBQyxLQURWO0FBQUEsRUFFVixZQUFBLEVBQWMsTUFBTSxDQUFDLE1BRlg7QUFBQSxFQUdWLFNBQUEsRUFBVyxFQUhEO0FBQUEsRUFJVixXQUFBLEVBQWEsQ0FBQSxFQUpIO0FBQUEsRUFLVixVQUFBLEVBQVksQ0FBQSxFQUxGO0FBQUEsRUFNVixTQUFBLEVBQVcsU0FORDtBQUFBLEVBT1YsbUJBQUEsRUFBcUIsU0FQWDtBQUFBLEVBUVYsSUFBQSxFQUFNLEVBUkk7QUFBQSxFQVNWLE9BQUEsRUFBUyxJQVRDO0FBQUEsRUFVVixZQUFBLEVBQWMsbUNBVko7QUFBQSxFQVdWLGVBQUEsRUFBaUIsU0FYUDtBQUFBLEVBWVYsVUFBQSxFQUFZLElBWkY7QUFBQSxFQWFWLFNBQUEsRUFBVyxFQWJEO0FBQUEsRUFjVixVQUFBLEVBQVksU0FkRjtDQVJYLENBQUE7O0FBQUEsUUF3QlEsQ0FBQyxjQUFULEdBQTBCO0FBQUEsRUFDekIsUUFBQSxFQUFVLE1BRGU7QUFBQSxFQUV6QixTQUFBLEVBQVcsUUFGYztBQUFBLEVBR3pCLFVBQUEsRUFBWSw2QkFIYTtDQXhCMUIsQ0FBQTs7QUFBQSxRQTZCUSxDQUFDLGNBQVQsR0FBMEI7QUFBQSxFQUN6QixRQUFBLEVBQVUsTUFEZTtBQUFBLEVBRXpCLFVBQUEsRUFBWSxNQUZhO0FBQUEsRUFHekIsS0FBQSxFQUFPLE1BSGtCO0FBQUEsRUFJekIsU0FBQSxFQUFXLFFB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LElBNkRBLFNBQVMsQ0FBQyxVQUFWLEdBQXVCLFVBN0R2QixDQUFBO0FBQUEsSUE4REEsU0FBUyxDQUFDLFVBQVUsQ0FBQyxPQUFyQixHQUErQixLQTlEL0IsQ0FBQTtBQUFBLElBZ0VBLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBYixDQUFrQixTQUFsQixDQWhFQSxDQUFBO0FBQUEsSUFrRUEsU0FBUyxDQUFDLEVBQVYsQ0FBYSxNQUFNLENBQUMsS0FBcEIsRUFBMkIsU0FBQSxHQUFBO2FBQzFCLE1BQU0sQ0FBQyxXQUFQLENBQW1CLElBQUMsQ0FBQSxJQUFwQixFQUQwQjtJQUFBLENBQTNCLENBbEVBLENBQUE7QUFBQSxJQXFFQSxDQUFBLEVBckVBLENBREQ7QUFBQSxHQTNCQTtBQUFBLEVBb0dBLE1BQU0sQ0FBQyxXQUFQLENBQW1CLE1BQU0sQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUFFLENBQUMsSUFBbkMsQ0FwR0EsQ0FBQTtBQXNHQSxTQUFPLE1BQVAsQ0F6R2dCO0FBQUEsQ0FyRmpCLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiIyMjXG5cdHRhYkJhck1vZHVsZVxuXHTigJNcblx0Q3JlYXRlZCBieSBQZXR0ZXIgTmlsc3NvblxuXHRodHRwOi8vcGV0dGVyLnByb1xuIyMjXG5cbiMgRGVmYXVsdCBzdHlsZXNcbmRlZmF1bHRzID0ge1xuXHRzY3JlZW5XaWR0aDogU2NyZWVuLndpZHRoXG5cdHNjcmVlbkhlaWdodDogU2NyZWVuLmhlaWdodFxuXHRiYXJIZWlnaHQ6IDk4XG5cdGxhYmVsT2Zmc2V0OiAtMjhcblx0aWNvbk9mZnNldDogLTEyXG5cdHRpbnRDb2xvcjogXCIjMDA3YWZmXCJcblx0dGludENvbG9yVW5zZWxlY3RlZDogXCIjOTI5MjkyXCJcblx0Ymx1cjogNDBcblx0b3BhY2l0eTogMC43NVxuXHRib3JkZXJTaGFkb3c6IFwiMHB4IC0xcHggMHB4IDBweCByZ2JhKDAsMCwwLDAuMzIpXCJcblx0YmFja2dyb3VuZENvbG9yOiBcIiNmOGY4ZjhcIlxuXHRzaG93TGFiZWxzOiB0cnVlXG5cdGJhZGdlU2l6ZTogMzZcblx0YmFkZ2VDb2xvcjogXCIjRkYzQjMwXCJcbn1cbmRlZmF1bHRzLmxhYmVsVGV4dFN0eWxlID0ge1xuXHRmb250U2l6ZTogXCIyMHB4XCJcblx0dGV4dEFsaWduOiBcImNlbnRlclwiXG5cdGZvbnRGYW1pbHk6IFwiSGVsdmV0aWNhIE5ldWUnLCBzYW5zLXNlcmlmXCJcbn1cbmRlZmF1bHRzLmJhZGdlVGV4dFN0eWxlID0ge1xuXHRmb250U2l6ZTogXCIyNnB4XCJcblx0bGluZUhlaWdodDogXCIzNnB4XCJcblx0Y29sb3I6IFwiI2ZmZlwiXG5cdHRleHRBbGlnbjogXCJjZW50ZXJcIlxuXHRmb250RmFtaWx5OiBcIkhlbHZldGljYSBOZXVlJywgc2Fucy1zZXJpZlwiXG59XG5leHBvcnRzLmRlZmF1bHRzID0gZGVmYXVsdHNcblxuXG5nZXRJdGVtRnJvbU5hbWUgPSAobmFtZSkgLT5cblx0IyBSZXR1cm5zIGEgdGFiIGJhciBpdGVtIGlmIG5hbWVzIG1hdGNoZXNcblxuXHRmb3IgaXRlbSBpbiBAaXRlbXNcblx0XHRyZXR1cm4gaXRlbSBpZiBpdGVtLm5hbWUgaXMgbmFtZVxuXG5cbnVwZGF0ZVZpZXdzID0gKHNlbGVjdGVkSXRlbSkgLT5cblx0IyBTaG93cy9oaWRlcyB2aWV3cyBiYXNlZCBvbiBzZWxlY3RlZCB0YWIgYmFyIGl0ZW1cblxuXHRmb3IgaXRlbSBpbiBAaXRlbXNcblx0XHRpZiBpdGVtLnZpZXc/XG5cdFx0XHRpZiBpdGVtLnZpZXcgaXMgc2VsZWN0ZWRJdGVtLnZpZXcgdGhlbiBpdGVtLnZpZXcudmlzaWJsZSA9IHRydWUgZWxzZSBpdGVtLnZpZXcudmlzaWJsZSA9IGZhbHNlXG5cdFx0XHRpZiBpdGVtLmJsdXJWaWV3IGlzIHNlbGVjdGVkSXRlbS5ibHVyVmlldyB0aGVuIGl0ZW0uYmx1clZpZXcudmlzaWJsZSA9IHRydWUgZWxzZSBpdGVtLmJsdXJWaWV3LnZpc2libGUgPSBmYWxzZVxuXG5cbnNldFNlbGVjdGVkID0gKG5hbWUpIC0+XG5cdCMgU2V0cyBzZWxlY3RlZCB0YWIgaXRlbSBmcm9tIHRoZSBrZXkgKG5hbWUpIHVzZWQgd2hlbiBjcmVhdGluZyBpdFxuXG5cdGlmIG5hbWUgIT0gQHNlbGVjdGVkXG5cdFx0Zm9yIGl0ZW0gaW4gQGl0ZW1zXG5cdFx0XHRpZiBpdGVtLm5hbWUgaXMgbmFtZVxuXHRcdFx0XHRpdGVtLmljb25MYXllci5iYWNrZ3JvdW5kQ29sb3IgPSBkZWZhdWx0cy50aW50Q29sb3Jcblx0XHRcdFx0aXRlbS5sYWJlbExheWVyLnN0eWxlID0gXCJjb2xvclwiOiBkZWZhdWx0cy50aW50Q29sb3IgaWYgaXRlbS5sYWJlbExheWVyXG5cdFx0XHRcdGl0ZW0uaWNvbkxheWVyLnN0eWxlID0gXCItd2Via2l0LW1hc2staW1hZ2VcIjogXCJ1cmwoXCIgKyBpdGVtLmljb25MYXllci5zZWxlY3RlZEljb24gKyBcIilcIiBpZiBpdGVtLmljb25MYXllci5zZWxlY3RlZEljb25cblx0XHRcdFx0QHNlbGVjdGVkID0gaXRlbS5uYW1lXG5cdFx0XHRcdEB1cGRhdGVWaWV3cyhpdGVtKVxuXHRcdFx0XHRALmVtaXQoXCJ0YWJCYXJEaWRTd2l0Y2hcIiwgaXRlbS5uYW1lKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRpdGVtLmljb25MYXllci5iYWNrZ3JvdW5kQ29sb3IgPSBkZWZhdWx0cy50aW50Q29sb3JVbnNlbGVjdGVkXG5cdFx0XHRcdGl0ZW0ubGFiZWxMYXllci5zdHlsZSA9IFwiY29sb3JcIjogZGVmYXVsdHMudGludENvbG9yVW5zZWxlY3RlZCBpZiBpdGVtLmxhYmVsTGF5ZXJcblx0XHRcdFx0aXRlbS5pY29uTGF5ZXIuc3R5bGUgPSBcIi13ZWJraXQtbWFzay1pbWFnZVwiOiBcInVybChcIiArIGl0ZW0uaWNvbkxheWVyLmljb24gKyBcIilcIiBpZiBpdGVtLmljb25MYXllci5zZWxlY3RlZEljb25cblxuXG5zZXRCYWRnZVZhbHVlID0gKG5hbWUsIHZhbHVlKSAtPlxuXHQjIEFkZHMgYSBiYWRnZSB0byB0aGUgdGFiIGl0ZW0gaWYgdmFsdWUgaXMgYSBudW1iZXIgPiAwIGFuZCByZW1vdmVzIHRoZSBiYWRnZSBpZiBudWxsXG5cblx0Zm9yIGl0ZW0gaW4gQGl0ZW1zXG5cdFx0aWYgaXRlbS5uYW1lIGlzIG5hbWVcblx0XHRcdGlmIHZhbHVlXG5cdFx0XHRcdGl0ZW0uYmFkZ2VMYXllci5odG1sID0gdmFsdWVcblx0XHRcdFx0aXRlbS5iYWRnZUxheWVyLnZpc2libGUgPSB0cnVlXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGl0ZW0uYmFkZ2VMYXllci52aXNpYmxlID0gZmFsc2VcblxuXG5leHBvcnRzLnRhYkJhciA9IChiYXJJdGVtcykgLT5cblx0IyBDcmVhdGVzIGFuZCBzZXQtdXBzIHRoZSB0YWIgYmFyXG5cblx0dGFiQmFyID0gbmV3IExheWVyXG5cdFx0eDogMFxuXHRcdHk6IGRlZmF1bHRzLnNjcmVlbkhlaWdodCAtIGRlZmF1bHRzLmJhckhlaWdodFxuXHRcdHdpZHRoOiBkZWZhdWx0cy5zY3JlZW5XaWR0aFxuXHRcdGhlaWdodDogZGVmYXVsdHMuYmFySGVpZ2h0XG5cdFx0YmFja2dyb3VuZENvbG9yOiBkZWZhdWx0cy5iYWNrZ3JvdW5kQ29sb3JcblxuXHR0YWJCYXIuc3R5bGUgPSBcImJveC1zaGFkb3dcIjogZGVmYXVsdHMuYm9yZGVyU2hhZG93XG5cdHRhYkJhci5nZXRJdGVtRnJvbU5hbWUgPSBnZXRJdGVtRnJvbU5hbWVcblx0dGFiQmFyLnVwZGF0ZVZpZXdzID0gdXBkYXRlVmlld3Ncblx0dGFiQmFyLnNldFNlbGVjdGVkID0gc2V0U2VsZWN0ZWRcblx0dGFiQmFyLnNldEJhZGdlVmFsdWUgPSBzZXRCYWRnZVZhbHVlXG5cdHRhYkJhci5zZWxlY3RlZCA9IG51bGxcblx0dGFiQmFyLml0ZW1zID0gW11cblxuXHRiYWNrZ3JvdW5kID0gbmV3IExheWVyXG5cdFx0eDogMFxuXHRcdHk6IDBcblx0XHR3aWR0aDogZGVmYXVsdHMuc2NyZWVuV2lkdGhcblx0XHRoZWlnaHQ6IGRlZmF1bHRzLmJhckhlaWdodFxuXHRcdGJhY2tncm91bmRDb2xvcjogZGVmYXVsdHMuYmFja2dyb3VuZENvbG9yXG5cdFx0b3BhY2l0eTogZGVmYXVsdHMub3BhY2l0eVxuXHRcdHN1cGVyTGF5ZXI6IHRhYkJhclxuXG5cdGl0ZW1Db3VudCA9IE9iamVjdC5rZXlzKGJhckl0ZW1zKS5sZW5ndGhcblx0aSA9IDBcblxuXHRmb3IgbmFtZSxwYXJhbXMgb2YgYmFySXRlbXNcblx0XHRpdGVtTGF5ZXIgPSBuZXcgTGF5ZXJcblx0XHRcdGJhY2tncm91bmRDb2xvcjogXCJub25lXCJcblx0XHRcdHdpZHRoOiBkZWZhdWx0cy5zY3JlZW5XaWR0aCAvIGl0ZW1Db3VudFxuXHRcdFx0aGVpZ2h0OiBkZWZhdWx0cy5iYXJIZWlnaHRcblx0XHRcdHg6IGkgKiAoZGVmYXVsdHMuc2NyZWVuV2lkdGggLyBpdGVtQ291bnQpXG5cdFx0XHR5OiAwXG5cdFx0XHRzdXBlckxheWVyOiB0YWJCYXJcblx0XHRcdG5hbWU6IG5hbWVcblxuXHRcdGlmIHBhcmFtcy52aWV3P1xuXHRcdFx0IyBDcmVhdGUgYSBjb3B5IG9mIHRoZSB2aWV3LCBibHVyIGl0IGFuZCB1c2UgaXQgYXMgYSBiYWNrZ3JvdW5kXG5cdFx0XHRibHVyVmlldyA9IHBhcmFtcy52aWV3LmNvcHkoKVxuXHRcdFx0aWYgU2Nyb2xsQ29tcG9uZW50LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJsdXJWaWV3KVxuXHRcdFx0XHRibHVyVmlldy5jb250ZW50LmJsdXIgPSBkZWZhdWx0cy5ibHVyXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGJsdXJWaWV3LmJsdXIgPSBkZWZhdWx0cy5ibHVyXG5cdFx0XHRibHVyVmlldy5zdXBlckxheWVyID0gdGFiQmFyXG5cdFx0XHRibHVyVmlldy5pbmRleCA9IDBcblx0XHRcdGJsdXJWaWV3LnkgPSBibHVyVmlldy55IC0gKGRlZmF1bHRzLnNjcmVlbkhlaWdodCAtIGRlZmF1bHRzLmJhckhlaWdodClcblxuXHRcdFx0aXRlbUxheWVyLnZpZXcgPSBwYXJhbXMudmlld1xuXHRcdFx0aXRlbUxheWVyLmJsdXJWaWV3ID0gYmx1clZpZXdcblxuXHRcdGljb25MYXllciA9IG5ldyBMYXllclxuXHRcdFx0d2lkdGg6IDYwXG5cdFx0XHRoZWlnaHQ6IDYwXG5cdFx0XHRzdXBlckxheWVyOiBpdGVtTGF5ZXJcblx0XHRpY29uTGF5ZXIuaWNvbiA9IHBhcmFtcy5pY29uXG5cdFx0aWNvbkxheWVyLnNlbGVjdGVkSWNvbiA9IHBhcmFtcy5zZWxlY3RlZEljb24gaWYgcGFyYW1zLnNlbGVjdGVkSWNvbj9cblxuXHRcdCMgVGhpcyBibGFjayBtYWdpYyBpcyB1c2VkIHRvIHRpbnQgdGhlIFBORyBpbWFnZXMuIE9ubHkgd29ya3Mgb24gd2Via2l0IGJyb3dzZXJzIDovXG5cdFx0aWNvbkxheWVyLnN0eWxlID1cblx0XHRcdFwiLXdlYmtpdC1tYXNrLWltYWdlXCI6IFwidXJsKFwiICsgaWNvbkxheWVyLmljb24gKyBcIilcIlxuXHRcdFx0XCItd2Via2l0LW1hc2stcmVwZWF0XCI6IFwibm8tcmVwZWF0XCJcblx0XHRcdFwiLXdlYmtpdC1tYXNrLXBvc2l0aW9uXCI6IFwiY2VudGVyIGNlbnRlclwiXG5cdFx0aWNvbkxheWVyLmNlbnRlclgoKVxuXHRcdGljb25MYXllci5jZW50ZXJZKGRlZmF1bHRzLmljb25PZmZzZXQpXG5cdFx0aXRlbUxheWVyLmljb25MYXllciA9IGljb25MYXllclxuXG5cdFx0aWYgZGVmYXVsdHMuc2hvd0xhYmVsc1xuXHRcdFx0bGFiZWxMYXllciA9IG5ldyBMYXllclxuXHRcdFx0XHR3aWR0aDogaXRlbUxheWVyLndpZHRoXG5cdFx0XHRcdHg6IDBcblx0XHRcdFx0eTogZGVmYXVsdHMuYmFySGVpZ2h0ICsgZGVmYXVsdHMubGFiZWxPZmZzZXRcblx0XHRcdFx0c3VwZXJMYXllcjogaXRlbUxheWVyXG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogXCJub25lXCJcblx0XHRcdGxhYmVsTGF5ZXIuaHRtbCA9IG5hbWVcblx0XHRcdGxhYmVsTGF5ZXIuc3R5bGUgPSBkZWZhdWx0cy5sYWJlbFRleHRTdHlsZVxuXHRcdFx0aXRlbUxheWVyLmxhYmVsTGF5ZXIgPSBsYWJlbExheWVyXG5cblx0XHRiYWRnZUxheWVyID0gbmV3IExheWVyXG5cdFx0XHR3aWR0aDogZGVmYXVsdHMuYmFkZ2VTaXplXG5cdFx0XHRoZWlnaHQ6IGRlZmF1bHRzLmJhZGdlU2l6ZVxuXHRcdFx0eDogMFxuXHRcdFx0eTogNlxuXHRcdFx0Ym9yZGVyUmFkaXVzOiAxOFxuXHRcdFx0c3VwZXJMYXllcjogaXRlbUxheWVyXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGRlZmF1bHRzLmJhZGdlQ29sb3Jcblx0XHRiYWRnZUxheWVyLnN0eWxlID0gZGVmYXVsdHMuYmFkZ2VUZXh0U3R5bGVcblx0XHRiYWRnZUxheWVyLmNlbnRlclgoMjYpXG5cblx0XHRpdGVtTGF5ZXIuYmFkZ2VMYXllciA9IGJhZGdlTGF5ZXJcblx0XHRpdGVtTGF5ZXIuYmFkZ2VMYXllci52aXNpYmxlID0gZmFsc2VcblxuXHRcdHRhYkJhci5pdGVtcy5wdXNoKGl0ZW1MYXllcilcblxuXHRcdGl0ZW1MYXllci5vbiBFdmVudHMuQ2xpY2ssIC0+XG5cdFx0XHR0YWJCYXIuc2V0U2VsZWN0ZWQoQG5hbWUpXG5cblx0XHRpKytcblxuXHQjIFNlbGVjdCB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgdGFiIGJhclxuXHR0YWJCYXIuc2V0U2VsZWN0ZWQodGFiQmFyLml0ZW1zWzBdLm5hbWUpXG5cblx0cmV0dXJuIHRhYkJhclxuIl19
